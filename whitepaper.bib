
@book{sambraSolidPlatformDecentralized2016,
  title = {Solid: {{A Platform}} for {{Decentralized Social Applications Based}} on {{Linked Data}}},
  shorttitle = {Solid},
  date = {2016},
  author = {Sambra, Andrei Vlad and Mansour, Essam and Hawke, Sandro and Zereba, Maged and Greco, Nicola and Ghanem, Abdurrahman and Zagidulin, Dmitri and Aboulnaga, Ashraf and Berners-Lee, Tim},
  file = {/Users/carsonfarmer/Zotero/storage/WRS7243G/Sambra et al. - 2016 - Solid A Platform for Decentralized Social Applica.pdf}
}

@article{schneiderImplementingFaulttolerantServices1990,
  title = {Implementing Fault-Tolerant Services Using the State Machine Approach: {{A}} Tutorial},
  volume = {22},
  shorttitle = {Implementing Fault-Tolerant Services Using the State Machine Approach},
  number = {4},
  journaltitle = {ACM Computing Surveys (CSUR)},
  date = {1990},
  pages = {299--319},
  author = {Schneider, Fred B.},
  file = {/Users/carsonfarmer/Zotero/storage/53HMRXP7/Schneider - 1990 - Implementing fault-tolerant services using the sta.pdf}
}

@online{dixonWhyDecentralizationMatters2018,
  langid = {english},
  title = {Why {{Decentralization Matters}}},
  url = {https://medium.com/s/story/why-decentralization-matters-5e3f79f7638e},
  abstract = {We?ve forgotten there?s a better way to build internet services},
  journaltitle = {Medium},
  urldate = {2019-09-19},
  date = {2018-10-26T00:16:33.548Z},
  author = {Dixon, Chris},
  file = {/Users/carsonfarmer/Zotero/storage/AMCES5LY/why-decentralization-matters-5e3f79f7638e.html}
}

@online{LogWhatEvery,
  langid = {english},
  title = {The {{Log}}: {{What}} Every Software Engineer Should Know about Real-Time Data's Unifying Abstraction},
  url = {https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying},
  shorttitle = {The {{Log}}},
  abstract = {I joined LinkedIn about six years ago at a particularly interesting time. We were just beginning to run up against the limits of our monolithic, centralized database and needed to start the transition to a portfolio of specialized distributed systems. This has been an interesting experience: we buil},
  urldate = {2019-09-19},
  file = {/Users/carsonfarmer/Zotero/storage/3FV6CNMW/log-what-every-software-engineer-should-know-about-real-time-datas-unifying.html}
}

@book{bettsExploringCQRSEvent2013,
  title = {Exploring {{CQRS}} and {{Event Sourcing}}: {{A Journey}} into {{High Scalability}}, {{Availability}}, and {{Maintainability}} with {{Windows Azure}}},
  edition = {1st},
  isbn = {978-1-62114-016-0},
  shorttitle = {Exploring {{CQRS}} and {{Event Sourcing}}},
  abstract = {This guide is focused on building highly scalable, highly available, and maintainable applications with the Command \& Query Responsibility Segregation and the Event Sourcing architectural patterns. It presents a learning journey, not definitive guidance. It describes the experiences of a development team with no prior CQRS proficiency in building, deploying (to Windows Azure), and maintaining a sample real-world, complex, enterprise system to showcase various CQRS and ES concepts, challenges, and techniques. The development team did not work in isolation; we actively sought input from industry experts and from a wide group of advisors to ensure that the guidance is both detailed and practical. The CQRS pattern and event sourcing are not mere simplistic solutions to the problems associated with large-scale, distributed systems. By providing you with both a working application and written guidance, we expect youll be well prepared to embark on your own CQRS journey.},
  publisher = {{Microsoft patterns \& practices}},
  date = {2013},
  author = {Betts, Dominic and Dominguez, Julian and Melnik, Grigori and Simonazzi, Fernando and Subramanian, Mani}
}

@online{EventStore,
  title = {Event {{Store}}},
  url = {https://eventstore.org/},
  urldate = {2019-09-19},
  file = {/Users/carsonfarmer/Zotero/storage/G93L59TD/eventstore.org.html}
}

@online{ApacheKafka,
  langid = {english},
  title = {Apache {{Kafka}}},
  url = {https://kafka.apache.org/},
  abstract = {Apache Kafka: A Distributed Streaming Platform.},
  urldate = {2019-09-19},
  file = {/Users/carsonfarmer/Zotero/storage/I2J6VFHY/kafka.apache.org.html}
}

@online{Samza,
  title = {Samza},
  url = {http://samza.apache.org/},
  urldate = {2019-09-19},
  file = {/Users/carsonfarmer/Zotero/storage/SI8HKDCA/samza.apache.org.html}
}

@book{kleppmannDesigningDataintensiveApplications2017,
  title = {Designing Data-Intensive Applications: {{The}} Big Ideas behind Reliable, Scalable, and Maintainable Systems},
  shorttitle = {Designing Data-Intensive Applications},
  publisher = {{" O'Reilly Media, Inc."}},
  date = {2017},
  author = {Kleppmann, Martin},
  file = {/Users/carsonfarmer/Zotero/storage/URFG4WXM/Kleppmann - 2017 - Designing data-intensive applications The big ide.pdf;/Users/carsonfarmer/Zotero/storage/VBNSTW5Z/books.html}
}

@online{fowlerEventSourcing,
  title = {Event {{Sourcing}}},
  url = {https://martinfowler.com/eaaDev/EventSourcing.html},
  abstract = {Capture all changes to an application state as a sequence of events.},
  journaltitle = {martinfowler.com},
  urldate = {2019-09-19},
  author = {Fowler, Martin},
  file = {/Users/carsonfarmer/Zotero/storage/E5N2GKVJ/EventSourcing.html}
}

@online{microsoftcorporationAzureApplicationArchitecture,
  langid = {american},
  title = {Azure {{Application Architecture Guide}}},
  url = {https://docs.microsoft.com/en-us/azure/architecture/guide/},
  abstract = {A structured approach for designing applications on Azure that are scalable, resilient, and highly available},
  journaltitle = {Microsoft Docs},
  type = {Guide},
  urldate = {2019-09-19},
  author = {{Microsoft Corporation}},
  file = {/Users/carsonfarmer/Zotero/storage/ECPGU2YM/guide.html}
}

@online{eventsouceEventSourcingBasics,
  title = {Event {{Sourcing Basics}}},
  url = {https://eventstore.org/docs/event-sourcing-basics/},
  type = {Docs},
  urldate = {2019-09-19},
  author = {{Event Souce}},
  file = {/Users/carsonfarmer/Zotero/storage/SW7D5NXN/event-sourcing-basics.html}
}

@online{Reducers,
  langid = {english},
  title = {Reducers},
  url = {https://redux.js.org/},
  abstract = {Reducers},
  journaltitle = {Redux},
  urldate = {2019-09-19},
  file = {/Users/carsonfarmer/Zotero/storage/5Y8B5HZG/reducers.html}
}

@online{redux.js.orgGettingStartedRedux,
  langid = {english},
  title = {Getting {{Started}} with {{Redux}}},
  url = {https://redux.js.org/},
  abstract = {\# Getting Started with Redux},
  journaltitle = {redux.js.org},
  type = {Software},
  urldate = {2019-09-19},
  author = {{redux.js.org}},
  file = {/Users/carsonfarmer/Zotero/storage/SE4R7PXJ/getting-started.html}
}

@article{gilbertBrewerConjectureFeasibility2002a,
  title = {Brewer's Conjecture and the Feasibility of Consistent, Available, Partition-Tolerant Web Services},
  volume = {33},
  number = {2},
  journaltitle = {Acm Sigact News},
  date = {2002},
  pages = {51--59},
  author = {Gilbert, Seth and Lynch, Nancy},
  file = {/Users/carsonfarmer/Zotero/storage/AYA2HMXZ/Gilbert and Lynch - 2002 - Brewer's conjecture and the feasibility of consist.pdf}
}

@article{brewerRobustRobustDistributed2000,
  title = {Towards {{Robust Towards Robust Distributed Systems}} 19th {{ACM Symposium}} on {{Principles}} of {{Distributed Computing}} ({{PODC}})},
  journaltitle = {Invited talk},
  date = {2000},
  author = {Brewer, Eric}
}

@article{almeidaDeltaStateReplicated2018,
  langid = {english},
  title = {Delta State Replicated Data Types},
  volume = {111},
  issn = {07437315},
  doi = {10.1016/j.jpdc.2017.08.003},
  journaltitle = {Journal of Parallel and Distributed Computing},
  shortjournal = {Journal of Parallel and Distributed Computing},
  date = {2018-01},
  pages = {162-173},
  author = {Almeida, Paulo Sérgio and Shoker, Ali and Baquero, Carlos},
  file = {/Users/carsonfarmer/Zotero/storage/SPTIUTW7/Almeida et al. - 2018 - Delta state replicated data types.pdf}
}

@article{parkerDetectionMutualInconsistency1983,
  title = {Detection of {{Mutual Inconsistency}} in {{Distributed Systems}}},
  volume = {SE-9},
  doi = {10.1109/TSE.1983.236733},
  abstract = {Many distributed systems are now being developed to provide users with convenient access to data via some kind of communications network. In many cases it is desirable to keep the system functioning even when it is partitioned by network failures. A serious problem in this context is how one can support redundant copies of resources such as files (for the sake of reliability) while simultaneously monitoring their mutual consistency (the equality of multiple copies). This is difficult since network faiures can lead to inconsistency, and disrupt attempts at maintaining consistency. In fact, even the detection of inconsistent copies is a nontrivial problem. Naive methods either 1) compare the multiple copies entirely or 2) perform simple tests which will diagnose some consistent copies as inconsistent. Here a new approach, involving version vectors and origin points, is presented and shown to detect single file, multiple copy mutual inconsistency effectively. The approach has been used in the design of LOCUS, a local network operating system at UCLA.},
  number = {3},
  journaltitle = {IEEE Transactions on Software Engineering},
  date = {1983-05},
  pages = {240-247},
  keywords = {Availability,Communication networks,Computer crashes,Computer science,Condition monitoring,Context,distributed systems,Maintenance,mutual consistency,network failures,Network operating systems,network partitioning,Performance evaluation,replicated data,Telecommunication network reliability,Testing},
  author = {Parker, D. S. and Popek, G. J. and Rudisin, G. and Stoughton, A. and Walker, B. J. and Walton, E. and Chow, J. M. and Edwards, D. and Kiser, S. and Kline, C.},
  file = {/Users/carsonfarmer/Zotero/storage/E3ARMDGL/1703051.html}
}

@report{shapiroComprehensiveStudyConvergent2011a,
  langid = {english},
  title = {A Comprehensive Study of {{Convergent}} and {{Commutative Replicated Data Types}}},
  url = {https://hal.inria.fr/inria-00555588},
  abstract = {Eventual consistency aims to ensure that replicas of some mutable shared object converge without foreground synchronisation. Previous approaches to eventual consistency are ad-hoc and error-prone. We study a principled approach: to base the design of shared data types on some simple formal conditions that are sufficient to guarantee eventual consistency. We call these types Convergent or Commutative Replicated Data Types (CRDTs). This paper formalises asynchronous object replication, either state based or operation based, and provides a sufficient condition appropriate for each case. It describes several useful CRDTs, including container data types supporting both \textbackslash{}add and \textbackslash{}remove operations with clean semantics, and more complex types such as graphs, montonic DAGs, and sequences. It discusses some properties needed to implement non-trivial CRDTs.},
  type = {report},
  urldate = {2019-09-19},
  date = {2011-01-13},
  author = {Shapiro, Marc and Preguiça, Nuno and Baquero, Carlos and Zawirski, Marek},
  file = {/Users/carsonfarmer/Zotero/storage/Y2RVPCXE/Shapiro et al. - 2011 - A comprehensive study of Convergent and Commutativ.pdf;/Users/carsonfarmer/Zotero/storage/MCQLQFZB/inria-00555588.html}
}

@incollection{kulkarniLogicalPhysicalClocks2014,
  location = {{Cham}},
  title = {Logical {{Physical Clocks}}},
  volume = {8878},
  isbn = {978-3-319-14471-9 978-3-319-14472-6},
  url = {http://link.springer.com/10.1007/978-3-319-14472-6_2},
  booktitle = {Principles of {{Distributed Systems}}},
  publisher = {{Springer International Publishing}},
  urldate = {2019-09-19},
  date = {2014},
  pages = {17-32},
  author = {Kulkarni, Sandeep S. and Demirbas, Murat and Madappa, Deepak and Avva, Bharadwaj and Leone, Marcelo},
  editor = {Aguilera, Marcos K. and Querzoni, Leonardo and Shapiro, Marc},
  doi = {10.1007/978-3-319-14472-6_2}
}

@article{schwarzDetectingCausalRelationships1994,
  langid = {english},
  title = {Detecting Causal Relationships in Distributed Computations: {{In}} Search of the Holy Grail},
  volume = {7},
  issn = {0178-2770, 1432-0452},
  doi = {10.1007/BF02277859},
  shorttitle = {Detecting Causal Relationships in Distributed Computations},
  number = {3},
  journaltitle = {Distributed Computing},
  shortjournal = {Distrib Comput},
  date = {1994-03},
  pages = {149-174},
  author = {Schwarz, Reinhard and Mattern, Friedemann},
  file = {/Users/carsonfarmer/Zotero/storage/M2D7HW4V/Schwarz and Mattern - 1994 - Detecting causal relationships in distributed comp.pdf}
}

@article{katzInterleavingSetTemporal1990,
  title = {Interleaving Set Temporal Logic},
  volume = {75},
  number = {3},
  journaltitle = {Theoretical Computer Science},
  date = {1990},
  pages = {263--287},
  author = {Katz, Shmuel and Peled, Doron},
  file = {/Users/carsonfarmer/Zotero/storage/FLFL9VRM/030439759090096Z.html}
}

@article{lamportTimeClocksOrdering1978,
  title = {Time, Clocks, and the Ordering of Events in a Distributed System},
  volume = {21},
  issn = {00010782},
  doi = {10.1145/359545.359563},
  number = {7},
  journaltitle = {Communications of the ACM},
  shortjournal = {Commun. ACM},
  date = {1978-07-01},
  pages = {558-565},
  author = {Lamport, Leslie},
  file = {/Users/carsonfarmer/Zotero/storage/BEG6DK2R/Lamport - 1978 - Time, clocks, and the ordering of events in a dist.pdf}
}

@article{ramabajaBloomClock2019,
  archivePrefix = {arXiv},
  eprinttype = {arxiv},
  eprint = {1905.13064},
  primaryClass = {cs},
  title = {The {{Bloom Clock}}},
  url = {http://arxiv.org/abs/1905.13064},
  abstract = {The bloom clock is a space-efficient, probabilistic data structure designed to determine the partial order of events in highly distributed systems. The bloom clock, like the vector clock, can autonomously detect causality violations by comparing its logical timestamps. Unlike the vector clock, the space complexity of the bloom clock does not depend on the number of nodes in a system. Instead it depends on a set of chosen parameters that determine its confidence interval, i.e. false positive rate. To reduce the space complexity from which the vector clock suffers, the bloom clock uses a 'moving window' in which the partial order of events can be inferred with high confidence. If two clocks are not comparable, the bloom clock can always deduce it, i.e. false negatives are not possible. If two clocks are comparable, the bloom clock can calculate the confidence of that statement, i.e. it can compute the false positive rate between comparable pairs of clocks. By choosing an acceptable threshold for the false positive rate, the bloom clock can properly compare the order of its timestamps, with that of other nodes in a highly accurate and space efficient way.},
  urldate = {2019-09-19},
  date = {2019-05-30},
  keywords = {Computer Science - Data Structures and Algorithms,Computer Science - Distributed; Parallel; and Cluster Computing},
  author = {Ramabaja, Lum},
  file = {/Users/carsonfarmer/Zotero/storage/8SFQAQ7W/Ramabaja - 2019 - The Bloom Clock.pdf;/Users/carsonfarmer/Zotero/storage/BX6BA8EK/1905.html}
}

@article{sanjuanMerkleCRDTs2019,
  langid = {english},
  title = {Merkle-{{CRDTs}}},
  abstract = {Merkle-DAG-backed CRDTs have been used to build some distributed applications on top of the Interplanetary File System (IPFS). In this paper we study Merkle-DAGs as transport and persistence layer for CRDT data types, coining the term Merkle-CRDTs and providing an overview of the di?erent concepts, properties, advantages and limitations involved. We show how Merkle-CRDTs have the potential to greatly simplify the design and implementation of convergent data types in systems with weak messaging layer guarantees and a potentially large number of replicas.},
  date = {2019-05},
  pages = {26},
  author = {Sanjuan, Hector and Poyhtari, Samuli and Teixeira, Pedro},
  file = {/Users/carsonfarmer/Zotero/storage/9BNCRFTG/Sanjuan et al. - 1Protocol Labs 2Haja Networks.pdf}
}

@book{mortContentBasedAddressing2012,
  langid = {english},
  title = {Content {{Based Addressing}} : {{The}} Case for Multiple {{Internet}} Service Providers},
  url = {http://urn.kb.se/resolve?urn=urn:nbn:se:kth:diva-107174},
  shorttitle = {Content {{Based Addressing}}},
  abstract = {DiVA portal is a finding tool for research publications and student theses written at the following 49 universities and research institutions.},
  urldate = {2019-09-19},
  date = {2012},
  author = {Mört, Robert},
  file = {/Users/carsonfarmer/Zotero/storage/U588DNK4/Mört - 2012 - Content Based Addressing  The case for multiple I.pdf;/Users/carsonfarmer/Zotero/storage/7TYXHMAT/record.html}
}

@article{benetIpfscontentAddressedVersioned2014,
  title = {Ipfs-Content Addressed, Versioned, P2p File System},
  journaltitle = {arXiv preprint arXiv:1407.3561},
  date = {2014},
  author = {Benet, Juan},
  file = {/Users/carsonfarmer/Zotero/storage/F4HVMIXM/Benet - 2014 - Ipfs-content addressed, versioned, p2p file system.pdf;/Users/carsonfarmer/Zotero/storage/NF985QYR/1407.html}
}


